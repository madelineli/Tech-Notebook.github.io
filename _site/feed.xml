<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Messy Toolbox</title>
    <description>“Prototypes, code segments, configuration examples -- stuff I have no room in my brain to remember&quot;</description>
    <link>http://madelineli.guthub.io</link>
    <atom:link href="http://madelineli.guthub.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Approach To Prototyping New Software</title>
        <description>&lt;p&gt;Tom Preston-Werner, the co-founder of GitHub who had since moved on to a new adventure had written a blog post on &lt;a href=&quot;http://tom.preston-werner.com/2011/03/29/ten-lessons-from-githubs-first-year.html&quot;&gt;Ten Lessons from GitHub’s First Year.&lt;/a&gt; Of the ten things he listed, I found the following most useful when comes to experimenting with new technology and prototyping new thing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Deploy At Will&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Imaging you’re tasked with building a computer controlled gun that can 
accurately hit a target about 50 meters distant. That is the only requirement.
One way to do this is to build a complex machine that measures every possible
variable (wind, elevation, temperature, etc.) before the shot and then 
takes aim and shoots. Another approach is to build a simple machine that 
fires rapidly and can detect where each shot hits. It then uses this 
information to adjust the aim of the next shot, quickly homing in on the 
target a little at a time.&lt;/p&gt;

  &lt;p&gt;The difference between these two approaches is to realize that bullets 
are cheap. By the time the former group has perfected their wind 
detection instrument, you’ll have finished your simple weapon and 
already hit the target.&lt;/p&gt;

  &lt;p&gt;In the world of web development, the target is your ideal offering, the 
bullets are your site deploys, and your customers provide the 
feedback mechanism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I often find myself thinking too hard on how to build something new from scratch and to make it clever and impressive. But thinking along that vein always gets me in trouble with meeting the deadline, because I would grossly under-estimate how much time I need to prove that something works. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JUST GET IT WORKING, NO MATTER WHAT IT TAKES!&lt;/strong&gt; Then refine it.&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://madelineli.guthub.io/DeployAtWill/</link>
        <guid isPermaLink="true">http://madelineli.guthub.io/DeployAtWill/</guid>
      </item>
    
      <item>
        <title>Using Maven to fix the line encoding issue</title>
        <description>&lt;p&gt;Remember the &lt;strong&gt;dos2unix&lt;/strong&gt; command? You are made to run the command whenever you deal with shell scripts that were created and maintained in a Windows environment, but have to be run on a Unix or Linux box during installation, or patch time. It always makes me wonder why I am still dealing with Windows..&lt;/p&gt;

&lt;p&gt;I recently had to develop a patch to migrate data from one data source to another. I ran into the same old carriage return/line feed issue when I tried to run a shell script I created on my Windows box on the linux integration box. Enter Maven. Its assembly plugin has an option for converting the carriage return/linefeed for Windows to unix/linux for a given file set. All you need to do is add the &amp;lt;lineEnding&amp;gt;unix&amp;lt;/lineEnding&amp;gt; to the assmebly’s config as the following demonstrates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;assembly xmslns=&quot;https://maven.apache.org./plugins/maven-assembly-plugin/assembly/1,1,2&quot;
          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
          xsi:schemaLocation=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd&quot;&amp;gt;

    &amp;lt;id&amp;gt;bin&amp;lt;/id&amp;gt;
    &amp;lt;formats&amp;gt;
        &amp;lt;format&amp;gt;zip&amp;lt;/format&amp;gt;
        &amp;lt;format&amp;gt;tar.gz&amp;lt;/format&amp;gt;
    &amp;lt;/formats&amp;gt;
    &amp;lt;fileSets&amp;gt;
        &amp;lt;fileSet&amp;gt;
            &amp;lt;directory&amp;gt;src/scripts&amp;lt;/directory&amp;gt;
            &amp;lt;outputDirectory&amp;gt;&amp;lt;/outputDirectory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;*.sh&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
            &amp;lt;lineEnding&amp;gt;unix&amp;lt;/lineEnding&amp;gt;
        &amp;lt;/fileSet&amp;gt;             
    &amp;lt;/fiseSets&amp;gt;
&amp;lt;/assembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Wed, 20 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://madelineli.guthub.io/dos2unix/</link>
        <guid isPermaLink="true">http://madelineli.guthub.io/dos2unix/</guid>
      </item>
    
      <item>
        <title>Muli-Column Sorting Using Apache Commons ComparatorChain</title>
        <description>&lt;h2 id=&quot;brief-intro&quot;&gt;Brief Intro&lt;/h2&gt;

&lt;p&gt;Apache Commons project offers a rich set of utilities to make developing in Java less tedious. (IMO, it’s one of the most useful tool sets out there.) The ComparatorChain class is one such tool. It wraps one or more Comparators in sequence and calls each Comparator in sequence. When sorting is performed, the ComparatorChain calls each Comparator in the order it was added until a Comparator returns a non-zero result or the ComparatorChain is exhausted. It’s very much like multi-column sorting in SQL.&lt;/p&gt;

&lt;p&gt;First, one needs to know the difference between a Comparator vs. a Comparable in Java. Here is a short description.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Comparable&lt;/em&gt; object is used to compare an object with another instance of the same class. An easier way to remember is to think of how one uses String’s equals() method for comparing a string to another string.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Comparator&lt;/em&gt; object is capable of comparing two objects which can be instances of the same class or instances of separate classes.&lt;/p&gt;

&lt;p&gt;As the name suggests, the CompratorChain works with classes that implement the Comparator interface. It relies on the compare() method of the Comparator classes. To get the comparsion going, you need to &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a Comparator class. Instances of the Comparator are added to ComparatorChain.&lt;/li&gt;
  &lt;li&gt;Use java.util.Collections’s sort method to perform the sort.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;I have a result collection of JSON objects. I want to sort the JSON objects by the date field in the descending order, followed by the title field in the ascending order.  The following shows an example search result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;results&quot;:[
        { &quot;Id&quot;: &quot;1234&quot;, &quot;Date&quot;: &quot;2014-08-16&quot;, &quot;Relevance&quot;: &quot;0.2345&quot;, &quot;Title&quot;: &quot;Trouble in South China Sea&quot;},
        { &quot;Id&quot;: &quot;3450&quot;, &quot;Date&quot;: &quot;2008-09-15&quot;, &quot;Relevance&quot;: &quot;0.7888&quot;, &quot;Title&quot;: &quot;Gaza Under Fire&quot;},
        { &quot;Id&quot;: &quot;4560&quot;, &quot;Date&quot;: &quot;2014-08-16&quot;, &quot;Relevance&quot;: &quot;0.3333&quot;, &quot;Title&quot;: &quot;Fergusion Riot&quot;}
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(1) Create a class to specify Sort crieteria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SearchSort {

   public Static enum Direction {
     asc,
     desc;

 
   public static Direction fromString(String inDirection) {
     for (Direction direction: values()) {
       if (StringUtils.equalsIgnoreCase(inDiection, direction.name())) {
          return direction;
       }
     }
     return null;
   }

   private String field;
   private Direction direction;

   public SearchSort() {}
   public SearchSort(String field, Direction direction) {
     this.field = field;
     this.direction = direction;
   }
   public setField(String field) { this.field = field;}
   public String getField() { return this.field; }
   public setDiriection(Direction dir) { this.direction = dir;}
   public getDirection() { return this.direction;}
   
}     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(2) Create a class that implements the Comparator interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class searchResultComparator implements Comparator&amp;lt;JsonNode&amp;gt; {

  private SearchSort searchSort;

  public SearchResultComparator(SearchSort searchSort) throws InvalidSortException {
       if (searchSort == null || searchSort.getField() == null || searchSort.getField))
         throw new InvalidSortException(&quot;SearchSort used to specify the sort criteria cannot be null!&quot;);
       this searchSort = searchSort;

  }

  public int compare(JsonNode node1, JsonNode node2) {
     if (node1 == null &amp;amp;&amp;amp; node2 == null) return 0;
     if (node1 == null) return -1;
     if (node2 == null) return 1;

     if (isNull(node1, searchSort.getField())) {
       if (isNull(node1, searchSort.getField())) return 0;
       return -1;

     }
     else {
       if (isNull(node2, searchSearch.getField())) return 1;

     }
     
     if (node1.get(searchSort.getField()).isDouble()) {
       Double val1, val2;
       val1 = node1.get(searchSort.getField()).asDouble();
       val2 = node2.get(searchSort.getField()).asDouble();
       return va11.compareTo(val2);
     }

     ....

     if (node1.get(searchSort.getField()).isInt()) {
       Integer val1, val2;
       val1 = node1.get(searchSort.getField()).asInt();
       val2 = node2.get(searchSort.getField()).asInt();
       return val1.compareTo(val2);

     }

     // Attempt to sort w/date and then text if it does not work
     Date date1, date2;
     String val1, val2;

     val1 = node1.get(searchSort.getField()).asText().toLowerCase();         
     val2 = node2.get(searchSort.getField()).asText().toLowerCase();
     
     // try to parse the text to see if it&#39;s a date field. If not, fail gracefully (swallow the exception).
     // If it&#39;s a date filed, then convert val to date object before comparision

     int cmp;
     DateFormat DATE_TIME_FORMAT = new SimpleDateFormat(&quot;yyyy-MM-dd:HH:mm:ss&quot;);
     DateFormat DATE_NO_TIME_FORMAT = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

     try {
        date1 = DATE_TIME_FORMAT.parse(val1);
        date2 = DATE_TIME_FORMAT.parse(val2);
        cmp = date1.compareTo(date2);
     }
     catch(ParseException pe) {
        try {
           date1 = DATE_NO_TIME_FORMAT.parse(val1);
           date2 = DATE_NO_TIME_FORMAT.parse(val2);
           cmp = date1.compareTo(date2);
        }
        catch(ParseException pe2) {

          // gracefully ignore. Compare the two as string
          cmp = val1.comepareTo(val2);
        }
     }
     
     return cmp;

   }

   private boolean isNull(JsonNode node, String field) {
       if (node.get(field) == null || node.get(field).isNull() || node.get(field).asText().equals(&quot;null&quot;)) return true;
       return fals;
   }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3) Create a collection of searchSort objects for search Criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;SearchSort&amp;gt; searchSortList = new ArrayList&amp;lt;SearchSort&amp;gt;)();
searchSortList.add(new SearchSort(&quot;Date&quot;, Direction.desc);
SearchSortList.add(new SearchSort(&quot;Title&quot;, Direction.asc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3) Create a ComparatorChain object to do the comparisons:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.apache.commons.collections.compartor.ComparatorChain  chain = new org.apache.commons.collections.comparator.ComparatorChain();

for (SearchSort searchSort : searchSortList) {
  try {
     SearchResultComparator comparator = new SearchResultComparator(searchSort);
     chain.addComparator(comparator, searchSort.getDirection() == SearchSort.Diection.desc); // false: ascending order, true: descending order
  catch (InvalidSortException ise) {
     log.error(&quot;The SearchSort object is null and cannot be used for sorting.&quot;);
  }
}

// Now sort the collection! supposed that our results are in a List&amp;lt;JsonNode&amp;gt; results
Collections.sort(results, chain);  //Collections is part of java.utils package.
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Tue, 19 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://madelineli.guthub.io/Comparator/</link>
        <guid isPermaLink="true">http://madelineli.guthub.io/Comparator/</guid>
      </item>
    
  </channel>
</rss>